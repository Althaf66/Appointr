basePath: /v1
definitions:
  main.CreateConversationRequest:
    properties:
      other_user_id:
        type: integer
    type: object
  main.CreateMessageRequest:
    properties:
      content:
        type: string
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterBookingSlotPayload:
    properties:
      days:
        items:
          type: string
        type: array
      end_period:
        type: string
      end_time:
        type: string
      start_period:
        type: string
      start_time:
        type: string
    type: object
  main.RegisterDisciplinePayload:
    properties:
      field:
        type: string
      subfield:
        type: string
    type: object
  main.RegisterEducationPayload:
    properties:
      degree:
        type: string
      field:
        type: string
      institute:
        type: string
      year_from:
        type: string
      year_to:
        type: string
    required:
    - degree
    - year_from
    type: object
  main.RegisterExperiencePayload:
    properties:
      company:
        type: string
      description:
        type: string
      title:
        type: string
      year_from:
        type: string
      year_to:
        type: string
    required:
    - title
    - year_from
    type: object
  main.RegisterExpertisePayload:
    properties:
      icon_svg:
        type: string
      name:
        type: string
    type: object
  main.RegisterGigPayload:
    properties:
      amount:
        type: number
      description:
        type: string
      discipline:
        items:
          type: string
        type: array
      expertise:
        type: string
      title:
        maxLength: 100
        type: string
    required:
    - amount
    - description
    - discipline
    - expertise
    - title
    type: object
  main.RegisterMeetingPayload:
    properties:
      amount:
        type: number
      date:
        type: string
      day:
        type: string
      mentorid:
        type: integer
      start_period:
        type: string
      start_time:
        type: string
    type: object
  main.RegisterMentorPayload:
    properties:
      country:
        type: string
      language:
        items:
          type: string
        type: array
      name:
        maxLength: 40
        type: string
    required:
    - country
    - language
    - name
    type: object
  main.RegisterSocialMediaPayload:
    properties:
      link:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.RegisterWorkingAtPayload:
    properties:
      company:
        type: string
      github:
        type: string
      instagram:
        type: string
      linkedin:
        type: string
      month:
        type: integer
      title:
        type: string
      totalyear:
        type: integer
    required:
    - title
    type: object
  main.UpdateDisciplinePayload:
    properties:
      field:
        type: string
      subfield:
        type: string
    type: object
  main.UpdateEducationPayload:
    properties:
      degree:
        type: string
      field:
        type: string
      institute:
        type: string
      year_from:
        type: string
      year_to:
        type: string
    type: object
  main.UpdateExperiencePayload:
    properties:
      company:
        type: string
      description:
        type: string
      title:
        type: string
      year_from:
        type: string
      year_to:
        type: string
    type: object
  main.UpdateExpertisePayload:
    properties:
      icon_svg:
        type: string
      name:
        type: string
    type: object
  main.UpdateGigPayload:
    properties:
      amount:
        type: number
      description:
        type: string
      discipline:
        items:
          type: string
        type: array
      expertise:
        type: string
      title:
        type: string
    type: object
  main.UpdateMentorPayload:
    properties:
      country:
        type: string
      language:
        items:
          type: string
        type: array
      name:
        maxLength: 40
        type: string
    type: object
  main.UpdateSocialMediaPayload:
    properties:
      link:
        type: string
      name:
        type: string
    type: object
  main.UpdateWorkingAtPayload:
    properties:
      company:
        type: string
      github:
        type: string
      instagram:
        type: string
      linkedin:
        type: string
      month:
        type: integer
      title:
        type: string
      totalyear:
        type: integer
    type: object
  main.UserWithToken:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      token:
        type: string
      username:
        type: string
    type: object
  store.BookingSlot:
    properties:
      created_at:
        type: string
      days:
        items:
          type: string
        type: array
      end_period:
        type: string
      end_time:
        type: string
      id:
        type: integer
      start_period:
        type: string
      start_time:
        type: string
      updated_at:
        type: string
      userid:
        type: integer
    type: object
  store.Conversation:
    properties:
      created_at:
        type: string
      id:
        type: integer
      last_message:
        $ref: '#/definitions/store.Message'
      other_user:
        allOf:
        - $ref: '#/definitions/store.User'
        description: The user that is not the current user
      participants:
        description: Derived fields (not stored directly in conversations table)
        items:
          $ref: '#/definitions/store.User'
        type: array
      unread:
        description: Number of unread messages
        type: integer
      updated_at:
        type: string
    type: object
  store.Discipline:
    properties:
      field:
        type: string
      id:
        type: integer
      subfield:
        type: string
    type: object
  store.Education:
    properties:
      degree:
        type: string
      field:
        type: string
      id:
        type: integer
      institute:
        type: string
      userid:
        type: integer
      year_from:
        type: string
      year_to:
        type: string
    type: object
  store.Experience:
    properties:
      company:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      userid:
        type: integer
      year_from:
        type: string
      year_to:
        type: string
    type: object
  store.Expertise:
    properties:
      icon_svg:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  store.Gig:
    properties:
      amount:
        type: number
      created_at:
        type: string
      description:
        type: string
      discipline:
        items:
          type: string
        type: array
      expertise:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      userid:
        type: integer
    type: object
  store.Meetings:
    properties:
      amount:
        type: number
      date:
        type: string
      day:
        type: string
      id:
        type: integer
      iscompleted:
        type: boolean
      isconfirm:
        type: boolean
      ispaid:
        type: boolean
      link:
        type: string
      mentorid:
        type: integer
      start_period:
        type: string
      start_time:
        type: string
      userid:
        type: integer
    type: object
  store.Mentor:
    properties:
      bookingslots:
        items:
          $ref: '#/definitions/store.BookingSlot'
        type: array
      country:
        type: string
      created_at:
        type: string
      education:
        items:
          $ref: '#/definitions/store.Education'
        type: array
      experience:
        items:
          $ref: '#/definitions/store.Experience'
        type: array
      gigs:
        items:
          $ref: '#/definitions/store.Gig'
        type: array
      id:
        type: integer
      language:
        items:
          type: string
        type: array
      name:
        type: string
      updated_at:
        type: string
      userid:
        type: integer
      workingat:
        $ref: '#/definitions/store.WorkingAt'
    type: object
  store.Message:
    properties:
      content:
        type: string
      conversation_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      is_read:
        type: boolean
      sender:
        allOf:
        - $ref: '#/definitions/store.User'
        description: Derived fields
      sender_id:
        type: integer
    type: object
  store.SocialMedia:
    properties:
      id:
        type: integer
      link:
        type: string
      name:
        type: string
      userid:
        type: integer
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      username:
        type: string
    type: object
  store.WorkingAt:
    properties:
      company:
        type: string
      github:
        type: string
      id:
        type: integer
      instagram:
        type: string
      linkedin:
        type: string
      month:
        type: integer
      title:
        type: string
      totalyear:
        type: integer
      userid:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a Appointr server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Appointr API
  version: "1.0"
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /bookingslots/create:
    post:
      consumes:
      - application/json
      description: Create a new booking slot
      parameters:
      - description: Booking Slot
        in: body
        name: slot
        required: true
        schema:
          $ref: '#/definitions/main.RegisterBookingSlotPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new booking slot
      tags:
      - booking
  /discipline:
    get:
      consumes:
      - application/json
      description: Fetches all discipline
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Discipline'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches all discipline
      tags:
      - discipline
  /discipline/{disciplineField}:
    get:
      consumes:
      - application/json
      description: Fetches discipline by Field
      parameters:
      - description: Discipline Field
        in: path
        name: disciplineField
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Discipline'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches discipline
      tags:
      - discipline
  /discipline/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a discipline field by ID
      parameters:
      - description: Discipline ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a discipline field
      tags:
      - discipline
    patch:
      consumes:
      - application/json
      description: Updates a discipline by ID
      parameters:
      - description: Discipline ID
        in: path
        name: id
        required: true
        type: integer
      - description: Discipline payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateDisciplinePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Discipline'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a discipline field
      tags:
      - discipline
  /discipline/create:
    post:
      consumes:
      - application/json
      description: creates a new discipline field
      parameters:
      - description: discipline
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterDisciplinePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Discipline registered
          schema:
            type: integer
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a new discipline
      tags:
      - discipline
  /education/{educationID}:
    delete:
      consumes:
      - application/json
      description: Delete education by id
      parameters:
      - description: Education ID
        in: path
        name: educationID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete education
      tags:
      - education
    patch:
      consumes:
      - application/json
      description: Update education
      parameters:
      - description: Education ID
        in: path
        name: educationID
        required: true
        type: integer
      - description: Education
        in: body
        name: education
        required: true
        schema:
          $ref: '#/definitions/main.UpdateEducationPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Education'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update education
      tags:
      - education
  /education/{educationid}:
    get:
      consumes:
      - application/json
      description: Get education by ID
      parameters:
      - description: Education ID
        in: path
        name: educationid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Education'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get education by ID
      tags:
      - education
  /education/create:
    post:
      consumes:
      - application/json
      description: Create a new education
      parameters:
      - description: Education
        in: body
        name: education
        required: true
        schema:
          $ref: '#/definitions/main.RegisterEducationPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new education
      tags:
      - education
  /education/u/{id}:
    get:
      consumes:
      - application/json
      description: Get all education by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Education'
            type: array
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all education by user ID
      tags:
      - education
  /experience/{experienceID}:
    delete:
      consumes:
      - application/json
      description: Delete experience by id
      parameters:
      - description: Experience ID
        in: path
        name: experienceID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete experience
      tags:
      - experience
    patch:
      consumes:
      - application/json
      description: Update experience
      parameters:
      - description: Experience ID
        in: path
        name: experienceID
        required: true
        type: integer
      - description: Experience
        in: body
        name: experience
        required: true
        schema:
          $ref: '#/definitions/main.UpdateExperiencePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Experience'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update experience
      tags:
      - experience
  /experience/{experienceid}:
    get:
      consumes:
      - application/json
      description: Get experience by ID
      parameters:
      - description: Experience ID
        in: path
        name: experienceid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Experience'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get experience by ID
      tags:
      - experience
  /experience/create:
    post:
      consumes:
      - application/json
      description: Create a new experience
      parameters:
      - description: Experience
        in: body
        name: experience
        required: true
        schema:
          $ref: '#/definitions/main.RegisterExperiencePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new experience
      tags:
      - experience
  /experience/u/{id}:
    get:
      consumes:
      - application/json
      description: Get all experience by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Experience'
            type: array
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all experience by user ID
      tags:
      - experience
  /expertise:
    get:
      consumes:
      - application/json
      description: Fetches all expertise
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Expertise'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches all expertise
      tags:
      - expertise
  /expertise/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a expertise field by ID
      parameters:
      - description: Discipline ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a expertise field
      tags:
      - expertise
    get:
      consumes:
      - application/json
      description: Fetches expertise by ID
      parameters:
      - description: Expertise ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Expertise'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches expertise
      tags:
      - expertise
    patch:
      consumes:
      - application/json
      description: Updates a expertise by ID
      parameters:
      - description: Expertise ID
        in: path
        name: id
        required: true
        type: integer
      - description: Expertise payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateExpertisePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Expertise'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a expertise field
      tags:
      - expertise
  /expertise/create:
    post:
      consumes:
      - application/json
      description: creates a new expertise field
      parameters:
      - description: expertise
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterExpertisePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Expertise registered
          schema:
            type: integer
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a new expertise
      tags:
      - expertise
  /gigs:
    get:
      consumes:
      - application/json
      description: Get all gigs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Gig'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all gigs
      tags:
      - gig
  /gigs/{gigID}:
    delete:
      consumes:
      - application/json
      description: Delete gig
      parameters:
      - description: Gig ID
        in: path
        name: gigID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete gig
      tags:
      - gig
    get:
      consumes:
      - application/json
      description: Get gig by ID
      parameters:
      - description: Gig ID
        in: path
        name: gigID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Gig'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get gig by ID
      tags:
      - gig
    patch:
      consumes:
      - application/json
      description: Update gig
      parameters:
      - description: Gig ID
        in: path
        name: gigID
        required: true
        type: integer
      - description: Gig payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateGigPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Gig'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update gig
      tags:
      - gig
  /gigs/create:
    post:
      consumes:
      - application/json
      description: Creates a gig
      parameters:
      - description: Gig payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterGigPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Gig'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a gig
      tags:
      - gig
  /gigs/expertise/{expertise}:
    get:
      consumes:
      - application/json
      description: Get gigs by expertise
      parameters:
      - description: Expertise
        in: path
        name: expertise
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Gig'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get gigs by expertise
      tags:
      - gig
  /health:
    get:
      description: Healthcheck endpoint
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Healthcheck
      tags:
      - health
  /meetings:
    get:
      consumes:
      - application/json
      description: Get all meetings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Meetings'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all meetings
      tags:
      - meetings
  /meetings/{meetingID}:
    delete:
      consumes:
      - application/json
      description: Delete a specific meeting
      parameters:
      - description: Meeting ID
        in: path
        name: meetingID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete meeting
      tags:
      - meetings
  /meetings/completed/{meetingID}:
    put:
      consumes:
      - application/json
      description: Update meeting completed status to true
      parameters:
      - description: Meeting ID
        in: path
        name: meetingID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Meetings'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Mark meeting as completed
      tags:
      - meetings
  /meetings/confirm/{meetingID}:
    put:
      consumes:
      - application/json
      description: Update meeting confirmation status to true
      parameters:
      - description: Meeting ID
        in: path
        name: meetingID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Meetings'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Confirm a meeting
      tags:
      - meetings
  /meetings/create:
    post:
      consumes:
      - application/json
      description: Create a new meeting
      parameters:
      - description: Meeting
        in: body
        name: meeting
        required: true
        schema:
          $ref: '#/definitions/main.RegisterMeetingPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Meetings'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new meeting
      tags:
      - meetings
  /meetings/mentor-not-completed/{mentorID}:
    get:
      consumes:
      - application/json
      description: Get meetings where iscompleted is false but confirmed and paid
        for a specific mentor
      parameters:
      - description: Mentor ID
        in: path
        name: mentorID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Meetings'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get uncompleted meetings by mentor ID
      tags:
      - meetings
  /meetings/mentor-not-confirm/{mentorID}:
    get:
      consumes:
      - application/json
      description: Get meetings where isconfirm is false for a specific mentor
      parameters:
      - description: Mentor ID
        in: path
        name: mentorID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Meetings'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get unconfirmed meetings by mentor ID
      tags:
      - meetings
  /meetings/paid/{meetingID}:
    put:
      consumes:
      - application/json
      description: Update meeting paid status to true
      parameters:
      - description: Meeting ID
        in: path
        name: meetingID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Meetings'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Mark meeting as paid
      tags:
      - meetings
  /meetings/u/{userID}:
    get:
      consumes:
      - application/json
      description: Get meetings for a specific user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Meetings'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get meetings by user ID
      tags:
      - meetings
  /meetings/user-not-completed/{userID}:
    get:
      consumes:
      - application/json
      description: Get meetings where iscompleted is false but confirmed and paid
        for a specific user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Meetings'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get uncompleted meetings by user ID
      tags:
      - meetings
  /meetings/user-not-paid/{userID}:
    get:
      consumes:
      - application/json
      description: Get meetings where ispaid is false for a specific user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Meetings'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get unpaid meetings by user ID
      tags:
      - meetings
  /mentors:
    get:
      consumes:
      - application/json
      description: Get all mentors
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Mentor'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all mentors
      tags:
      - mentor
  /mentors/{mentorID}:
    delete:
      consumes:
      - application/json
      description: Delete mentor
      parameters:
      - description: Mentor ID
        in: path
        name: mentorID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete mentor
      tags:
      - mentor
    get:
      consumes:
      - application/json
      description: Get mentor by ID
      parameters:
      - description: Mentor ID
        in: path
        name: mentorID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Mentor'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get mentor by ID
      tags:
      - mentor
    patch:
      consumes:
      - application/json
      description: Update mentor
      parameters:
      - description: Mentor ID
        in: path
        name: mentorID
        required: true
        type: integer
      - description: Mentor payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateMentorPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Mentor'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update mentor
      tags:
      - mentor
  /mentors/create:
    post:
      consumes:
      - application/json
      description: Creates a mentor
      parameters:
      - description: Mentor payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterMentorPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Mentor'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a mentor
      tags:
      - mentor
  /mentors/dis/{discipline}:
    get:
      consumes:
      - application/json
      description: Get mentor by discipline
      parameters:
      - description: Expertise
        in: path
        name: discipline
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Mentor'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get mentor by discipline
      tags:
      - mentor
  /mentors/exp/{expertise}:
    get:
      consumes:
      - application/json
      description: Get mentor by expertise
      parameters:
      - description: Expertise
        in: path
        name: expertise
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Mentor'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get mentor by expertise
      tags:
      - mentor
  /mentors/name/{mentorName}:
    get:
      consumes:
      - application/json
      description: Get mentor by name
      parameters:
      - description: Mentor Name
        in: path
        name: mentorName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Mentor'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get mentor by name
      tags:
      - mentor
  /mentors/u/{userID}:
    get:
      consumes:
      - application/json
      description: Get mentor by userID
      parameters:
      - description: Mentor ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Mentor'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get mentor by userID
      tags:
      - mentor
  /messages/{conversationID}:
    get:
      consumes:
      - application/json
      description: Get messages in a conversation with pagination
      parameters:
      - description: Conversation ID
        in: path
        name: conversationID
        required: true
        type: integer
      - default: 50
        description: Limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Message'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get conversation messages
      tags:
      - messages
  /messages/{conversationID}/read:
    put:
      consumes:
      - application/json
      description: Mark all messages in a conversation as read for a user
      parameters:
      - description: Conversation ID
        in: path
        name: conversationID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Conversation marked as read
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Mark conversation as read
      tags:
      - messages
  /messages/conversations:
    get:
      consumes:
      - application/json
      description: Get all conversations for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Conversation'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get user conversations
      tags:
      - messages
    post:
      consumes:
      - application/json
      description: Creates a new conversation with another user
      parameters:
      - description: Create conversation request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/main.CreateConversationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Conversation created
          schema:
            $ref: '#/definitions/store.Conversation'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create conversation
      tags:
      - messages
  /messages/conversations/{conversationID}:
    get:
      consumes:
      - application/json
      description: Get a conversation by ID
      parameters:
      - description: Conversation ID
        in: path
        name: conversationID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Conversation'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get specific conversation
      tags:
      - messages
  /messages/conversations/{id}/messages:
    post:
      consumes:
      - application/json
      description: Creates a new message in a conversation
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: integer
      - description: message
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/main.CreateMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Conversation created
          schema:
            $ref: '#/definitions/store.Message'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create message
      tags:
      - messages
  /messages/unread:
    get:
      consumes:
      - application/json
      description: Get total number of unread messages for the user
      produces:
      - application/json
      responses:
        "200":
          description: "count\":\tint"
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get unread message count
      tags:
      - messages
  /socialmedia/{socialMediaID}:
    delete:
      consumes:
      - application/json
      description: Delete socialmedia by id
      parameters:
      - description: SocialMedia ID
        in: path
        name: socialMediaID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete socialmedia
      tags:
      - socialmedia
    get:
      consumes:
      - application/json
      description: Get socialmedia by ID
      parameters:
      - description: SocialMedia ID
        in: path
        name: socialMediaID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.SocialMedia'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get socialmedia by ID
      tags:
      - socialmedia
    patch:
      consumes:
      - application/json
      description: Update socialmedia
      parameters:
      - description: SocialMedia ID
        in: path
        name: socialMediaID
        required: true
        type: integer
      - description: SocialMedia
        in: body
        name: socialmedia
        required: true
        schema:
          $ref: '#/definitions/main.UpdateSocialMediaPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.SocialMedia'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update socialmedia
      tags:
      - socialmedia
  /socialmedia/create:
    post:
      consumes:
      - application/json
      description: Create a new socialmedia
      parameters:
      - description: SocialMedia
        in: body
        name: socialmedia
        required: true
        schema:
          $ref: '#/definitions/main.RegisterSocialMediaPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new socialmedia
      tags:
      - socialmedia
  /socialmedia/u/{id}:
    get:
      consumes:
      - application/json
      description: Get all socialmedia by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.SocialMedia'
            type: array
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all socialmedia by user ID
      tags:
      - socialmedia
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/activate/{token}:
    put:
      description: Activates/Register a user by invitation token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activates/Register a user
      tags:
      - users
  /workingat/{workingatID}:
    delete:
      consumes:
      - application/json
      description: Delete workingat by id
      parameters:
      - description: WorkingAt ID
        in: path
        name: workingatID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete workingat
      tags:
      - workingat
    get:
      consumes:
      - application/json
      description: Get workingat by ID
      parameters:
      - description: WorkingAt ID
        in: path
        name: workingatID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.WorkingAt'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get workingat by ID
      tags:
      - workingat
    patch:
      consumes:
      - application/json
      description: Update workingat
      parameters:
      - description: WorkingAt ID
        in: path
        name: workingatID
        required: true
        type: integer
      - description: WorkingAt
        in: body
        name: workingat
        required: true
        schema:
          $ref: '#/definitions/main.UpdateWorkingAtPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.WorkingAt'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update workingat
      tags:
      - workingat
  /workingat/create:
    post:
      consumes:
      - application/json
      description: Create a new workingat
      parameters:
      - description: WorkingAt
        in: body
        name: workingat
        required: true
        schema:
          $ref: '#/definitions/main.RegisterWorkingAtPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new workingat
      tags:
      - workingat
  /workingat/u/{id}:
    get:
      consumes:
      - application/json
      description: Get all workingat by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.WorkingAt'
            type: array
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all workingat by user ID
      tags:
      - workingat
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
